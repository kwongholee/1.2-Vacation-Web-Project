서버: HTTP 요청을 받으면 요청한 내용을 보내주는 프로그램
HTTP요청: 읽기(GET), 쓰기(POST), 수정(PUT), 삭제(DEL)
JS: html을 조작하여 웹페이지를 다이나믹하게 이용 가능케 해주는 언어
JS 해석은 브라우저가 하며, 브라우저마다 제각기 다른 해석 엔진을 가지고 있음
chrome의 해석엔진인 V8을 별도로 떼와서 배포를 한 환경이 Node.js임
None-Blocking I/O: 모든 요청을 한 번에 다 받은 후 쉽게 처리되는 요청부터 차례대로 결과를 내놓음
노드의 특징: SNS, 채팅서비스에서 자주 사용/ 코드가 짧고 쉬움/ 웹서비스가 아니라면 다른 쪽 사용 ㄱㄱ
listen(서버 띄울 포트 번호, 띄운 후 실행할 코드(함수))
포트: 외부 네트워크와 통신하기 위해 존재하는 구멍
get('경로', function(req(요청내용), res(응답방법)){})
nodemon: 서버 재실행을 자동화해줌
html을 보낼 때는 sendFile(__dirname + '파일 경로') 사용
form태그에 있어야 하는 두 가지 속성: method(HTTP요청 방법), action(요청할 경로)
body-parser: 요청 데이터(req) 해석을 쉽게 도와줌
Post 요청으로 서버에 데이터 전송하는 법: body-parser 필요 => input에 name 쓰기
API: (웹 개발 시) 웹서버와 고객간의 소통 방식 = 어떻게 해야 서버랑 통신을 할 수 있을까
Rest API: 1. Uniform interface(하나의 자료는 하나의 url로) 2. Client-Server 역할 구분 3. Stateless(요청들 사이의 의존성 X) 4. Cacheable 5. Layered System 6. Code on Demand
Uniform interface가 가장 중요함
이름짓기 원칙: URL을 명사로 작성할 것, 하위 문서로 나타낼 땐 /, 파일확장자 쓰지 말 것, 띄어쓰기는 대시 사용, 자료 하나당 하나의 URL
웹사이트 기능 만들기: 서버로 데이터 전송할 수 있는 UI 만들고 서버에서 원하는대로 정보 처리
DB종류: 관계형(대부분 SQL이라는 언어 사용), NoSQL(Object 자료형으로 입출력 가능, 데이터 입출력에만 신경 쓸 수 있음)
db.collection('post').insertOne('저장할 데이터', function(err, res) {console.log('Save')}); db라는 변수 선언 후 db에 저장
몽고디비는 schema 신경 안 써도 됨
_id로 직접 부여 가능
EJS: html을 쓰기 더 쉽게 도와주는 전처리 엔진(ejs 파일 확장자 사용 가능) => 서버 데이터 삽입 가능
ejs파일 안에서 데이터 넣는 법: <%= 변수이름 %>
ejs 파일은 항상 views 폴더에다가 넣어서 저장해야 함
ejs 파일을 js에서 부를때는 res.render('파일이름', {작명: 데이터})
db에서 자료 찾기 => 찾은 걸 ejs 파일에 넣기
ejs파일에서 반복문을 돌리기 위해선 <% %>로 시작과 끝을 감싸야함
auto increment: db에 항목을 추가할 때마다 자동으로 1증가시켜서 저장하는 기능(몽고디비에는 구현 X)
보통 영구적인 글번호를 달아서 저장하는 것이 좋음
db 내의 자료 수정: db.collection('collection name').updateOne({수정할 데이터}, {operator : {수정할 값}}, function(){})
mongodb 오퍼레이터는 구글링 후 사용해보셈
html에서 method는 오직 Get과 Post 밖에 안 됨
DELETE 요청하는 법: method-override 라이브러리 설치(노드에서 가능) / JavaScript AJAX 이용
AJAX: 새로고침 없이 서버랑 통신할 수 있게 도와주는 JS 문법
AJAX 문법(JQuery): $.ajax({method: '요청방법', url: '경로', data: '보낼 데이터'}).done(function(result) {})
data-id: html 파일 안에 보이지 않지만 태그가 가질 수 있는 데이터
서버에 요청 응답을 보내는 법: res.status(응답 코드 번호).send({object})
콜백함수 안에서 (e.click = 지금 클릭한 것) != (this = 지금 이벤트 동작하는 곳)
서버가 요청을 실패했을 때 ajax함수 뒤에 붙어있는 fail에서 코드 실행됨
fail(function(a,응답코드,에러메세지) {console.log(a,응답코드,에러메세지)});
/:(parameter) : 요청 가능한 url를 무진장 많이 만들 수 있음
bootstrap에서 container class 사용시 좌우 여백 자동으로 줄 수 있음
보통 css 파일은 public 폴더에 만든 후 사용(js에서 미들웨어를 사용하겠다고 선언해야함)
ejs에서는 중복되는 부분은 제거한 후 한 html 파일로 옮겨서 <%- include('경로') %>로 조립식 사용 가능
method-override: form에 put, delete 요청도 하게 도와주는 라이브러리(문법이 따로 있으니 검색 ㄱㄱ)
res.redirect('경로'): 해당 경로로 이동시키기
회원인증: session, token, open authentication
session-based: 로그인 시 쿠키(브라우저에 저장하는 긴 문자열) 발행 => 세션 데이터에다가 서버 메모리(로그인 기록) 저장 => 쿠키에 세션아이디 저장
=> 서버에 마이페이지 요청할 때 쿠키를 서버로 자동으로 보냄 => 세션데이터에서 확인 후 html 보냄 {장점이자 단점: 로그인 상태를 저장}
token-based(JWT): 로그인 시 서버에서 JSON Web Token을 발행 후 브라우저에 보냄 => 마이페이지 요청 시 헤더에 웹토큰을 같이 전송함
=> 서버에서 토큰의 유효기간 확인 후 html 보냄 {특징: 유저의 로그인 상태를 저장할 필요가 없음}
open Authentication(OAuth): {페이스북이나 구글 등의 사이트에서 프로필을 가져옴} 로그인 시 계정 정보를 가져오는 동의 팝업창을 띄움 
=> 동의 시 프로필을 기반으로 한 로그인 정보를 새롭게 만듦 (방식은 자유)
미들웨어: 요청-응답 중간에 뭔가 실행되는 코드
로그인 시도 => 아이디,비번 검사 => 로그인 성공하면 세션정보 만듦 => 마이페이지 방문시 세션 검사
done(서버에러, 성공시사용자DB데이터(아이디/비번 안 맞으면 false넣으면 됨), 에러메세지)
pw를 검사할 때는 암호화해서 보내야 함(안하면 보안 쓰레기임)
next(): 다음 과정으로 통과
로그인 기능 flow(흐름)을 잘 아는 것이 중요함
환경변수(env): 환경에 따라 가변적인 변수 데이터
.env 파일에 나중에 변경이 될 것 같은 환경변수들을 모두 저장함(문법은 이전과 동일하되 변수명을 대문자료 표기함)
query string: url에 데이터를 숨기는 방법(?데이터이름=데이테값)
window.location.replace('경로'): 해당 경로로 현재 페이지의 url을 변경해주세요(=get요청)
정규식을 사용하면 문자열 검사가 가능하지만 디비에 데이터가 많을 경우 시간이 오래 걸림
따라서 indexing을 해놓으면 나중에 데이터를 걸러내기 편함, 이때 문자열 검사가 필요하다면 문자열을 정렬한 뒤 indexing하는게 편함
indexing 후 binary search 통해서 효율적으로 데이터 찾아내기
$.param(데이터명) or $(폼태그).serialize() : querystring 쉽게 작성하는 법
text index 만들어두면 빠른 검색, or 검색기능, -제외기능, "정확히일치하는것만찾기"기능 사용할 수 있음
그러나 text index를 사용하면 띄어쓰기 기준으로 단어를 저장하기 때문에 단어의 일부만 검색하면 걸러져서 나옴
위의 문제 해결할려면 search index 만들면 됨
회원기능이 필요하면 passport 셋팅하는 부분이 위에 있어야 함
회원가입 기능에서 필요한 것: 이미 동일한 id가 존재하는지? id에 알파벳 숫자 (한글)만 들어갔는지? 비번 저장 전에 암호화했는지?
라우터가 너무 많으면 라우터 파일로 분리해서 export하고 server.js에 import하기
특정 라우터 파일에 미들웨어를 적용하고 싶으면 server.js에서 router.use(미들웨어)를 사용하면 됨
보통 페이지에서 업로드한 이미지는 작업폴더 안에 저장함(db에 저장해도 되지만 용량도 크고 일반 하드에 저장하는게 싸고 편함)
multer: 파일 전송 쉽게 저장하고 분석할 수 있는 라이브러리
mongoose 필수? : 몽고디비에 데이터 넣고 뺄 때 사용하는 라이브러리임(얘 사용하면 편해지긴 함 + validation 쉬워짐)
근데 요즘은 mongodb native 엄청 발전함 => mongodb compass 사용하면 mongoose 안 써도 됨
보안은 필수임! 스스로가 악성유저가 되어서 생각해볼 것
서버 해킹에 대한 공격도 보안에서 유의해야 함(xxs 공격, brute force attack 등)
관리자 기능? : db document에서 role을 정하면 끝!
크게 만들 때는 작은 기능부터 차근차근 만들어나가면 됨!
채팅 기능 = 게시물발행 기능 + 게시물간 관계맺기 + db 실시간 업데이트
채팅기능 == 댓글기능 ( + 실시간 기능)
댓글기능을 실행할시 부모게시물이 뭔지도 저장해야함!
게시물간의 종속관계를 표현하고 싶을 때 부모정보까지 저장하면 됨
글 & 댓글 == 채팅방 & 메세지
댓글 기능 만들기: 부모게시글을 저장하는 법 or 게시물 db에 모든 댓글을 밀어넣는 법
get, post는 http 요청이라고 부름
http 요청시 몰래 전달되는 정보들(유저의 언어, 브라우저 정보 등등)이 있음
그 정보들은 Header라는 공간 안에 담김
일반적인 get, post 요청은 1회 요청시 1회 응답만 가능하지만 SSE를 사용하면 여러번 응답 가능
유저에게 데이터 전송은 event: 보낼데이터이름\n, data: 보낼데이터\n\n
유저의 데이터 수신은 new EventSource('/경로')
get 요청시 서버로 데이터 전송하려면 url parameter 혹은 query string
서버에서 실시간 전송 시 문자자료만 전송 가능(그래서 JSON화를 많이 함)
db는 수동적이라 자동 업무가 불가능함
따라서 mongodb change stream 쓰면 자동 업무가 가능함(db 변동 -> 서버에 알림 -> 유저에게 보냄)

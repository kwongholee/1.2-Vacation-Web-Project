서버: HTTP 요청을 받으면 요청한 내용을 보내주는 프로그램
HTTP요청: 읽기(GET), 쓰기(POST), 수정(PUT), 삭제(DEL)
JS: html을 조작하여 웹페이지를 다이나믹하게 이용 가능케 해주는 언어
JS 해석은 브라우저가 하며, 브라우저마다 제각기 다른 해석 엔진을 가지고 있음
chrome의 해석엔진인 V8을 별도로 떼와서 배포를 한 환경이 Node.js임
None-Blocking I/O: 모든 요청을 한 번에 다 받은 후 쉽게 처리되는 요청부터 차례대로 결과를 내놓음
노드의 특징: SNS, 채팅서비스에서 자주 사용/ 코드가 짧고 쉬움/ 웹서비스가 아니라면 다른 쪽 사용 ㄱㄱ
listen(서버 띄울 포트 번호, 띄운 후 실행할 코드(함수))
포트: 외부 네트워크와 통신하기 위해 존재하는 구멍
get('경로', function(req(요청내용), res(응답방법)){})
nodemon: 서버 재실행을 자동화해줌
html을 보낼 때는 sendFile(__dirname + '파일 경로') 사용
form태그에 있어야 하는 두 가지 속성: method(HTTP요청 방법), action(요청할 경로)
body-parser: 요청 데이터(req) 해석을 쉽게 도와줌
Post 요청으로 서버에 데이터 전송하는 법: body-parser 필요 => input에 name 쓰기
API: (웹 개발 시) 웹서버와 고객간의 소통 방식 = 어떻게 해야 서버랑 통신을 할 수 있을까
Rest API: 1. Uniform interface(하나의 자료는 하나의 url로) 2. Client-Server 역할 구분 3. Stateless(요청들 사이의 의존성 X) 4. Cacheable 5. Layered System 6. Code on Demand
Uniform interface가 가장 중요함
이름짓기 원칙: URL을 명사로 작성할 것, 하위 문서로 나타낼 땐 /, 파일확장자 쓰지 말 것, 띄어쓰기는 대시 사용, 자료 하나당 하나의 URL
웹사이트 기능 만들기: 서버로 데이터 전송할 수 있는 UI 만들고 서버에서 원하는대로 정보 처리
DB종류: 관계형(대부분 SQL이라는 언어 사용), NoSQL(Object 자료형으로 입출력 가능, 데이터 입출력에만 신경 쓸 수 있음)
db.collection('post').insertOne('저장할 데이터', function(err, res) {console.log('Save')}); db라는 변수 선언 후 db에 저장
몽고디비는 schema 신경 안 써도 됨
_id로 직접 부여 가능
EJS: html을 쓰기 더 쉽게 도와주는 전처리 엔진(ejs 파일 확장자 사용 가능) => 서버 데이터 삽입 가능
ejs파일 안에서 데이터 넣는 법: <%= 변수이름 %>
ejs 파일은 항상 views 폴더에다가 넣어서 저장해야함